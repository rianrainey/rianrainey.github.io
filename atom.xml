<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rian Rainey]]></title>
  <link href="http://www.rian.me/atom.xml" rel="self"/>
  <link href="http://www.rian.me/"/>
  <updated>2013-11-11T11:40:01-06:00</updated>
  <id>http://www.rian.me/</id>
  <author>
    <name><![CDATA[Rian Rainey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Waking Up Early]]></title>
    <link href="http://www.rian.me/blog/2013/11/11/waking-up-early/"/>
    <updated>2013-11-11T07:58:00-06:00</updated>
    <id>http://www.rian.me/blog/2013/11/11/waking-up-early</id>
    <content type="html"><![CDATA[<p>Today, I&#39;m giving &quot;Becoming A Morning Person&quot; another chance to be a
habit in my life. I recently read an article on
<a href="http://99u.com/workbook/19887/labrat-become-a-morning-person">99U</a> that
encourgaged readers to wake up early in an effort to be more productive
and happy. I decided to join this movement. I spoke so much about this
that my wife decided to do day 1 with me too. You can follow more of the
movement with the hastag,
<a href="http://twitter.com/#labrat">#labrat</a></p>

<p>Here was my schedule for night/day 1:</p>

<ul>
<li><strong>9:30pm</strong> - Start getting ready for bed</li>
<li><strong>9:45pm</strong> - Roughly list items to do at 6am</li>
<li><strong>10:00pm</strong> - Go to sleep</li>
<li><strong>6:00am</strong> - Attempt to wake up. Reset alarm to 6:30am.</li>
<li><strong>6:30am</strong> - Convince my wife to get up with me since she requested that
encouragement.</li>
<li><strong>6:45am</strong> - With coffee in hand, I read my text messages and found my brother
wanted me to listen to his recent podcast episode. So, I derailed once again from my to
do list and listened to the podcast.</li>
<li><strong>7:00am</strong> - Convince my wife to let me go upstairs where I could be alone
to journal for 1/2 hour.</li>
<li><strong>7:15am</strong> - Journaling results in getting motivated to do work. So I stop
journaling early to start coding. My email is open so I&#39;m getting
inundated with auto-generated subscription emails. Responded to a few
emails and then promptly closed it.</li>
<li><strong>7:30am</strong> - Coding results in me debugging my Octopress blog install for
the next 1.5 hours before I really need to start doing some real,
&quot;pay-the-bills&quot;, work.</li>
</ul>

<h2 id="toc_0">Takeaways</h2>

<p>I set out to do tons of work in the morning but didn&#39;t get nearly as
much done as I wanted. It was a good start to the &quot;morning person&quot;
routine, I believe. </p>

<p>Things I want to do better tomorrow:</p>

<ul>
<li>Wake up at 6am. No snoozing.</li>
<li>Don&#39;t read email, text messages, Twitter, or Instagram before 9am.</li>
<li>Set out to accomplish only 1 thing in the morning instead of
attempting to do many things.</li>
<li>Keep journaling in my morning routine.</li>
<li>Make sure my wife has tasks to accomplish so I&#39;m free to work :)</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is the difference between '===', '==', '.equal?' and '.eql?' in Ruby?]]></title>
    <link href="http://www.rian.me/blog/2013/10/15/what-is-the-difference-between-equals-equals-equals-and-equals-equals-in-ruby/"/>
    <updated>2013-10-15T19:02:00-05:00</updated>
    <id>http://www.rian.me/blog/2013/10/15/what-is-the-difference-between-equals-equals-equals-and-equals-equals-in-ruby</id>
    <content type="html"><![CDATA[<p>My years of programming have taking me along the lines of
learning Java in college, to PHP as a CMS hacker and now to Ruby. I was
recently going through an exercise in
<a href="http://www.exercism.io">Exercism.io</a> and while somebody was
&quot;nitpicking&quot; my code, they mentioned that I probably didn&#39;t need the <code>===</code> in my
code. My code was making sure two variables were of the same type and
value. It looked a little like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Bad - my original code</span>
</span><span class='line'><span class="n">variableA</span> <span class="o">===</span> <span class="n">variableB</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Good - my new code</span>
</span><span class='line'><span class="n">variableA</span> <span class="o">==</span> <span class="n">variableB</span>
</span></code></pre></td></tr></table></div></figure>

<p>My nitpicker mentioned that I only needed <code>==</code>. But since I came from
the recent world of PHP, I was confused why I shouldn&#39;t use <code>===</code>. In
PHP, the double equals just checks for the same value and disregards
type. In Ruby, it&#39;s a whole different story.</p>

<p>I discovered it had to do with the fact that everything in Ruby is an
object and different objects can have different definitions for equality
(same goes for all object orient languages). Ruby&#39;s Object class has <code>===</code>, <code>.equal?</code>,
and <code>.eql?</code> by default. Many times Ruby classes override <code>==</code> but <code>.equal?</code> <strong>should never be overriden</strong>.</p>

<h3 id="toc_0">What is the &#39;==&#39;?</h3>

<p>At the Ruby Object level, <code>==</code> returns true only if the two compared
entities are the same object. Typically this is overriden in descendant
classes. You&#39;ll want to use this method if your object implements this. </p>

<p>If you are looking for generic equality,
consider using, <code>.eql?</code>. You should look at your particular Ruby
object in question to see how they implemented <code>==</code>.</p>

<h3 id="toc_1">What is the &#39;===&#39;?</h3>

<h4 id="toc_2"><code>===</code> is the Case Equality Operator (Case Subsumption Operator)</h4>

<p>The best answer I found was the Subsumption Operator answers the
question, &quot;If I have a drawer labeled &#39;a&#39; would it make sense to put &#39;b&#39; in that drawer?&quot;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="p">)</span> <span class="o">===</span> <span class="mi">3</span>           <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="p">)</span> <span class="o">===</span> <span class="mi">6</span>           <span class="c1"># =&gt; false</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Integer</span> <span class="o">===</span> <span class="mi">42</span>          <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="nb">Integer</span> <span class="o">===</span> <span class="s1">&#39;fourtytwo&#39;</span> <span class="c1"># =&gt; false</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="toc_3">What is the &#39;.eql?&#39;</h3>

<p>A good synonym phrase would be &#39;Generic Equality&#39;. <strong>The eql? method returns true if obj and other have the same value.</strong></p>

<p>The <code>.eql?</code> method returns <code>true</code> if both objects in question return the
same hash key. This is used by Hash to test members for equality. For objects of class Object,
<code>eql?</code> is synonymous with ==.</p>

<p>Subclasses normally continue this tradition, but there are exceptions. Numeric types, for example, perform type conversion across ==, but not across eql?, so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span>     <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">eql?</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span>   <span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>

<p>The Ruby Documentation explains <code>==</code> well:</p>

<blockquote>
<p>At the Object level, <code>==</code> returns true only if obj and other are the same object.
Typically, this method is overridden in descendant classes to provide class-specific
meaning.</p>
</blockquote>

<h3 id="toc_4">What is the &#39;.equal?&#39; - determines object identitfy</h3>

<p>This is effectively pointer comparison. &quot;Is this the <em>exact</em> same
object?&quot;</p>

<h3 id="toc_5">tldr;</h3>

<p>Equality in Ruby is confusing. You&#39;ll want to be informed when using it
and make sure you have an effective test suite.</p>

<p><code>==</code> is overriden on a per class basis. Usually you&#39;ll
want to use the class&#39;s implementation of equals.</p>

<p><code>===</code> answers the question &quot;If I have a drawer labeled &#39;a&#39;, would it
make sense to put &#39;b&#39; in that drawer?&quot;. You don&#39;t use this as often.</p>

<p><code>.equal?</code> should never be overriden by a subclass.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="s2">&quot;a&quot;</span>         <span class="c1"># =&gt; &quot;a&quot;</span>
</span><span class='line'><span class="n">other</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">dup</span>   <span class="c1"># =&gt; &quot;a&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">==</span> <span class="n">other</span>      <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">a</span> <span class="o">===</span> <span class="n">other</span>     <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">eql?</span> <span class="n">other</span>    <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">equal?</span> <span class="n">other</span>  <span class="c1"># =&gt; false</span>
</span></code></pre></td></tr></table></div></figure>

<h4 id="toc_6">Resources</h4>

<p><a href="http://ruby-doc.org/core-2.0.0/Object.html">Ruby Object Docs</a></p>

<p><a href="http://ruby-doc.org/core-2.0.0/String.html#method-i-3D-3D-3D">Ruby String === Docs</a></p>

<p><a href="http://stackoverflow.com/a/4467823/652200">Stack Overflow 1</a></p>

<p><a href="http://stackoverflow.com/a/7157051/652200">Stack Overflow 2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Find A File Using Unix's Find]]></title>
    <link href="http://www.rian.me/blog/2013/10/03/how-to-find-a-file-using-unix-slash-s-find/"/>
    <updated>2013-10-03T09:39:00-05:00</updated>
    <id>http://www.rian.me/blog/2013/10/03/how-to-find-a-file-using-unix-slash-s-find</id>
    <content type="html"><![CDATA[<p>Whenever I need to find text within a file, I use
<a href="http://www.beyondgrep.com">Ack</a>. However, when I need to find where a
particular file is and I know the name of the file, there is nothing
better than using <code>find</code>. What the below command is doing is finding, in
the current directory, by name, the file, <code>deploy.yml</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>find . -name deploy.yml</span></code></pre></td></tr></table></div></figure>

<p>For information, check out <code>man find</code>. I&#39;m still making a more conserted
effort to read and more easily interpret Man pages.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Chose Octopress]]></title>
    <link href="http://www.rian.me/blog/2013/09/30/Why-I-Chose-Octopress/"/>
    <updated>2013-09-30T00:00:00-05:00</updated>
    <id>http://www.rian.me/blog/2013/09/30/Why-I-Chose-Octopress</id>
    <content type="html"><![CDATA[<ul>
<li>Easy Deployment</li>
<li>Posts in Markdown</li>
<li>Beautiful code sharing</li>
<li>Better than Jekyll</li>
<li>Easiest platform for me to blog</li>
</ul>

<h2 id="toc_0">Easy Deployment</h2>

<p>Destinations can be to <strong>any server</strong> (rsync&#39;d) , <strong>Heroku</strong>, or
<strong>Github Pages</strong> (my personal preference). For more details on each type
of deployment, head over to <a href="http://octopress.org/docs/deploying/">Octopress&#39;
documentation</a>. Since I prefer
Github Pages, I&#39;ll show you how easy that is.</p>

<ol>
<li>Create a GH repository in the format of username.github.io. Since my
Github username is <code>rianrainey</code>, my repository name is
<code>rianrainey.github.io</code>.</li>
<li>Setup your project to work with Github with this command:</li>
</ol>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>`rake setup_github_pages`</span></code></pre></td></tr></table></div></figure>

<ol>
<li>Generate, commit, push, deploy and more magic with this command</li>
</ol>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate</span></code></pre></td></tr></table></div></figure>

<ol>
<li>Deploy to Github</li>
</ol>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>

<p>In a few minutes your site will be live at username.github.io, or
rianrainey.github.io.</p>

<p>To deploy your blog posts and any other changes, you only need to run
<code>rake deploy</code> and you&#39;re done.</p>

<h2 id="toc_1">Beautiful Code Sharing</h2>

<p>I&#39;m excited to be able to share code as easily as this:</p>

<figure class='code'><figcaption><span>How To Create a RVM Getset and .rvmrc For A New Project</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm --rvmrc --create gemset 1.9.3-p362@octopress
</span></code></pre></td></tr></table></div></figure>

<figure class='code'><figcaption><span>What Ruby Would Look Like</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_function</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Hello World&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>There is an entire <a href="http://octopress.org/docs/blogging/code/">Octopress page</a>
dedicated to code styling.</p>

<h2 id="toc_2">Better Than Jekyll</h2>

<h4 id="toc_3">Reasons Why I Chose Octopress over Jekyll</h4>

<ul>
<li>SASS</li>
<li>RSS Feed</li>
<li>Archives</li>
<li>3rd Party Integration Out of the Box

<ul>
<li>Github - List your github repositories in the sidebar</li>
<li>Twitter - Add a button for sharing of posts and pages on Twitter</li>
<li>Google Plus One - Setup sharing for posts and pages on Google&#39;s plus one network.</li>
<li>Pinboard - Share your recent Pinboard bookmarks in the sidebar.</li>
<li>Delicious - Share your recent Delicious bookmarks in the sidebar.</li>
<li>Disqus Comments - Add your disqus short name to enable disqus comments on your site.</li>
<li>Google Analytics - Add your tracking id to enable Google Analytics tracking for your site.</li>
<li>Facebook - Add a Facebook like button</li>
</ul></li>
<li><a href="https://github.com/imathis/octopress/wiki/3rd-party-plugins">Additoinal 3rd Party Plugins</a></li>
</ul>

<p>Yes, I could get all of these things if I added them manually. But why? I could have a completely custom site if I just wrote it in raw HTML/CSS/JS. Why reinvent the wheel when I already want these features or will possibly want them in the future?</p>
]]></content>
  </entry>
  
</feed>
